{"ast":null,"code":"var _jsxFileName = \"/Users/stark_bannerman/Desktop/Projects/WeatherApp/Server/client/src/Pages/CurrentWeather.jsx\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from \"react\";\nimport { Box } from \"@mui/material\";\nimport axios from \"axios\";\nimport { APP_URL } from \"../constants\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function CurrentWeather() {\n  _s();\n  const [weatherData, setWeatherData] = useState({\n    data: \"Arun\"\n  });\n  const getCurrentLocation = async () => {\n    return new Promise((resolve, reject) => {\n      if (\"geolocation\" in navigator) {\n        navigator.geolocation.getCurrentPosition(position => resolve(`${position.coords.latitude},${position.coords.longitude}`), error => {\n          console.error(\"Error getting location:\", error.message);\n          reject(error.message);\n        });\n      } else {\n        console.error(\"Geolocation is not supported by this browser.\");\n        reject(\"Geolocation is not supported by this browser.\");\n      }\n    });\n  };\n  useEffect(() => {\n    const fetchData = async () => {\n      try {\n        const location = await getCurrentLocation();\n        console.log(\"Location:\", location);\n        const response = await axios.post(`${APP_URL}/currentWeather`, {\n          location: location\n        });\n        console.log(response);\n        setWeatherData(response.data);\n      } catch (error) {\n        console.error(\"Error fetching data:\", error.message);\n      }\n    };\n    fetchData();\n  }, []);\n  return /*#__PURE__*/_jsxDEV(Box, {\n    children: /*#__PURE__*/_jsxDEV(\"pre\", {\n      children: JSON.stringify(weatherData, null, 2)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 49,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 48,\n    columnNumber: 5\n  }, this);\n}\n_s(CurrentWeather, \"EhltqXZlXwzoJwRUsdnx6mP5LgI=\");\n_c = CurrentWeather;\nvar _c;\n$RefreshReg$(_c, \"CurrentWeather\");","map":{"version":3,"names":["React","useState","useEffect","Box","axios","APP_URL","jsxDEV","_jsxDEV","CurrentWeather","_s","weatherData","setWeatherData","data","getCurrentLocation","Promise","resolve","reject","navigator","geolocation","getCurrentPosition","position","coords","latitude","longitude","error","console","message","fetchData","location","log","response","post","children","JSON","stringify","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/Users/stark_bannerman/Desktop/Projects/WeatherApp/Server/client/src/Pages/CurrentWeather.jsx"],"sourcesContent":["import React, { useState, useEffect } from \"react\";\nimport { Box } from \"@mui/material\";\nimport axios from \"axios\";\nimport { APP_URL } from \"../constants\";\n\nexport default function CurrentWeather() {\n  const [weatherData, setWeatherData] = useState({ data: \"Arun\" });\n\n  const getCurrentLocation = async () => {\n    return new Promise((resolve, reject) => {\n      if (\"geolocation\" in navigator) {\n        navigator.geolocation.getCurrentPosition(\n          (position) =>\n            resolve(`${position.coords.latitude},${position.coords.longitude}`),\n          (error) => {\n            console.error(\"Error getting location:\", error.message);\n            reject(error.message);\n          }\n        );\n      } else {\n        console.error(\"Geolocation is not supported by this browser.\");\n        reject(\"Geolocation is not supported by this browser.\");\n      }\n    });\n  };\n\n  useEffect(() => {\n    const fetchData = async () => {\n      try {\n        const location = await getCurrentLocation();\n        console.log(\"Location:\", location);\n\n        const response = await axios.post(`${APP_URL}/currentWeather`, {\n          location: location,\n        });\n\n        console.log(response);\n        setWeatherData(response.data);\n      } catch (error) {\n        console.error(\"Error fetching data:\", error.message);\n      }\n    };\n\n    fetchData();\n  }, []);\n\n  return (\n    <Box>\n      <pre>{JSON.stringify(weatherData, null, 2)}</pre>\n    </Box>\n  );\n}\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AAClD,SAASC,GAAG,QAAQ,eAAe;AACnC,OAAOC,KAAK,MAAM,OAAO;AACzB,SAASC,OAAO,QAAQ,cAAc;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAEvC,eAAe,SAASC,cAAcA,CAAA,EAAG;EAAAC,EAAA;EACvC,MAAM,CAACC,WAAW,EAAEC,cAAc,CAAC,GAAGV,QAAQ,CAAC;IAAEW,IAAI,EAAE;EAAO,CAAC,CAAC;EAEhE,MAAMC,kBAAkB,GAAG,MAAAA,CAAA,KAAY;IACrC,OAAO,IAAIC,OAAO,CAAC,CAACC,OAAO,EAAEC,MAAM,KAAK;MACtC,IAAI,aAAa,IAAIC,SAAS,EAAE;QAC9BA,SAAS,CAACC,WAAW,CAACC,kBAAkB,CACrCC,QAAQ,IACPL,OAAO,CAAE,GAAEK,QAAQ,CAACC,MAAM,CAACC,QAAS,IAAGF,QAAQ,CAACC,MAAM,CAACE,SAAU,EAAC,CAAC,EACpEC,KAAK,IAAK;UACTC,OAAO,CAACD,KAAK,CAAC,yBAAyB,EAAEA,KAAK,CAACE,OAAO,CAAC;UACvDV,MAAM,CAACQ,KAAK,CAACE,OAAO,CAAC;QACvB,CACF,CAAC;MACH,CAAC,MAAM;QACLD,OAAO,CAACD,KAAK,CAAC,+CAA+C,CAAC;QAC9DR,MAAM,CAAC,+CAA+C,CAAC;MACzD;IACF,CAAC,CAAC;EACJ,CAAC;EAEDd,SAAS,CAAC,MAAM;IACd,MAAMyB,SAAS,GAAG,MAAAA,CAAA,KAAY;MAC5B,IAAI;QACF,MAAMC,QAAQ,GAAG,MAAMf,kBAAkB,CAAC,CAAC;QAC3CY,OAAO,CAACI,GAAG,CAAC,WAAW,EAAED,QAAQ,CAAC;QAElC,MAAME,QAAQ,GAAG,MAAM1B,KAAK,CAAC2B,IAAI,CAAE,GAAE1B,OAAQ,iBAAgB,EAAE;UAC7DuB,QAAQ,EAAEA;QACZ,CAAC,CAAC;QAEFH,OAAO,CAACI,GAAG,CAACC,QAAQ,CAAC;QACrBnB,cAAc,CAACmB,QAAQ,CAAClB,IAAI,CAAC;MAC/B,CAAC,CAAC,OAAOY,KAAK,EAAE;QACdC,OAAO,CAACD,KAAK,CAAC,sBAAsB,EAAEA,KAAK,CAACE,OAAO,CAAC;MACtD;IACF,CAAC;IAEDC,SAAS,CAAC,CAAC;EACb,CAAC,EAAE,EAAE,CAAC;EAEN,oBACEpB,OAAA,CAACJ,GAAG;IAAA6B,QAAA,eACFzB,OAAA;MAAAyB,QAAA,EAAMC,IAAI,CAACC,SAAS,CAACxB,WAAW,EAAE,IAAI,EAAE,CAAC;IAAC;MAAAyB,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAM;EAAC;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OAC9C,CAAC;AAEV;AAAC7B,EAAA,CA9CuBD,cAAc;AAAA+B,EAAA,GAAd/B,cAAc;AAAA,IAAA+B,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}